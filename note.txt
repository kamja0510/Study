웹의 역사
    - 1990s : static sites
        - 서버에 이미 잘 만들어진 html 문서들이 있다.
        - 사용자가 접속하면 서버에 이미 배포되어 있는 html문서를 받아와 보여주는 형식.
        - 페이지 내에 다른 페이지로 이동하는 링크를 클릭하면 다시 서버에서 문서를 받아오고, 페이지 전체가 업데이트 되어야한다.
    - 1996 : iframe
        - 문서내에서 또다른 문서를 담을 수 있는 태그
        - static site의 단점을 보완해줌.
    - 1998 : XMLHttpRequest
        - fetch API의 원조.
        - JSON과 같은 format으로 필요한 데이터만 가볍게 받아올 수 있다.
        - 그 데이터를 JS를 이용하여 동적으로 html 요소를 생성하여 페이지에 업데이트 하는 방식.
    - 2005 : AJAX






html에 대하여.

렌더링

메타데이터







css에 대하여.

relative units
    ㄴ %
        - relative to parent element
    ㄴ em
        - relative to parent element's font-size
    ㄴ rem
        - relative to root element
    ㄴ vw, vh
        - relative to viewport


flexbox

grid







JS에 대하여.

async vs defer
    -

변수 선언
    ㄴ var
        - hoisting
        - has no block scope
    ㄴ const
        - security
        - thread safety
            - thread들이 동시에 변수 값을 바꾸려하는 것은 위험하다.
        - reduce human mistackes
        - 상수값이지만 객체를 선언하면 내부를 바꿀 수 있다.
    ㄴ let

variable types
    ㄴ primitive type
        ㄴ number
            ㄴ spcial numeric values
                ㄴ infinity 
                ㄴ -infinity
                ㄴ NaN
        ㄴ string
            ㄴ \
            ㄴ Number()
            ㄴ parseInt()
            ㄴ parseFloat()
            ㄴ substring()
        ㄴ boolean
            ㄴ true
            ㄴ false
                ㄴ 빈 문자열
                ㄴ 0
                ㄴ NaN
                ㄴ null
                ㄴ undefined 
        ㄴ null
        ㄴ undefined
        ㄴ symbol
    ㄴ reference type 
        ㄴ object
            ㄴ function(first-class function)
            ㄴ array
    ㄴ typeof()
    ㄴ type casting (type conversion)
        ㄴ 더하기 연산일 때 : 어느 한 쪽 이라도 문자열이 있으면 양쪽 모두를 문자열로 형 변환해서 연산을 수행
        ㄴ 그 외 연산일 때 : 산술연산은 일반적으로 피연산자 모두를 숫자로 형 변환해서 연산을 수행



operator
    ㄴ string concatenation                                                             
    ㄴ numeric operator
    ㄴ increment operator & decrement operator
        ㄴ preincrement & predecrement : ++count, --count
        ㄴ postincrement & postdecrement : count++, count--
    ㄴ assignment operator
    ㄴ comparison operator
    ㄴ logical operator
        ㄴ || 
            - 앞에서 확인하다가 true가 한개라도 나오면 확인을 멈춘다.
        ㄴ && 
            - 앞에서 확인하다가 false가 한개라도 나오면 확인을 멈춘다.
        ㄴ !
    ㄴ equality
        ㄴ loose equality : with type conversion
        ㄴ strict equality : no type conversion
        - 객체는 가지고있는 주소값으로 비교를 한다.
        - null == undefined 는 true로 결과값이 나온다.
            ㄴ 굉장히 이해안돼는것들이 많으므로 strict equality를 자주 쓰자.
    ㄴ conditional operator (Ternary operator) : condition ? value1(true) : value2(false)
    ㄴ 우선순위 

ㄴ conditional statement
    ㄴ if
    ㄴ else if
    ㄴ else
    
switch statement                                                              
loop
    ㄴ while
    ㄴ do while
    ㄴ for : for(begin; condition; step){}
        ㄴ for ... of                                                                  
            - list 요소들에 순차적으로 접근
        ㄴ forEach                                                              
        ㄴ for ... in
            - object의 key들에 순차적으로 접근
    ㄴ nested loop : 반복문 안에 반복문
        - 피하는게 좋음.
break & continue

function
    - fundamental building block in the program
    - subprogram
    - function is object in JS
    - a function declaration can be called earlier than it is defiend. (hoisting)
    ㄴ return
        - 기본값은 undefined
        - return이 돼는 순간 함수 종료
    ㄴ argument
        ㄴ arguments
            - 내가 전달한 인자들을 배열로 가지는 함수안에서만 쓸 수 있는 변수.
            - cannot use in arrow function
    ㄴ parameter
        ㄴ primitive parameter
        ㄴ object parameter
        ㄴ default parameter
        ㄴ rest parameter                                                       
            - rest parameter 에는 default parameter가 적용이 안됌.
    ㄴ anonymous function
    ㄴ named function
    ㄴ callback function
        - 함수에 parameter로 들어가는 함수
        - 순차적으로 실행하고 싶을 때 씀
        ㄴ synchronous callback
        ㄴ asynchronous callback
            ㄴ setTimeout()
    ㄴ arrow function                                                              
    ㄴ IIFE : immediately invoked function expression                     

array                                                                            
    ㄴ index
        ㄴ .length
    ㄴ APIs
        ㄴ push()
        ㄴ pop()
        ㄴ shift(), unshift()
            - shift, unshift are slower than push, pop
        ㄴ splice()
        ㄴ concat()
        ㄴ indexOf()
        ㄴ includes()
        ㄴ lastIndexOf()
        ㄴ join()
        ㄴ split()
        ㄴ reverse()
        ㄴ slice()
        ㄴ find()
        ㄴ filter()
        ㄴ map()
        ㄴ some()
        ㄴ every()
        ㄴ reduce()
        ㄴ sort()
    
object
    - instance of class
    - { key : value}
        ㄴ computed properties                                                                                                                       
            - key should be always string
    ㄴ object literal syntax
    ㄴ object constructor syntax
    ㄴ property value shorthand                                                       
    ㄴ constructor function                                                    
    ㄴ Object.assign();

class                                                                             
    - template
    - declare once
    - no data in
    ㄴ field
        ㄴ public
        ㄴ private
    ㄴ method
    ㄴ getter and setter                                                         
        - 너무 어렵다...
    ㄴ static
    ㄴ extends
        ㄴ super
        ㄴ instanceof

HTTP
    - Hypertext Transfer Protocal
AJAX
    - Asynchronous JavaScript And XML
XHR
    - XML HTTP Request
    - object
fetch()
    - API
JSON
    - JavaScript Object Notation
    - simplest data interchange format
    - independent of programming language and platform
    ㄴ serialize
        - object to JSON
        ㄴ stringify()
    ㄴ deserialize
        - JSON to object
        ㄴ parse(json)
synchronous
    - execute the code block in order after hoisting
Promise                                                                                 
    - JS object for asynchronous operation
    ㄴ state
        - pending -> fulfilled or rejected
    ㄴ producer                                                                       
        - doing some heavy work(network, read files)
        - when new promise is created, the executor runs automatically.
    ㄴ consumer
        - then()                                                                       
        - catch()
        - finally()
    ㄴ chaining
    ㄴ error handling
    ㄴ async                                                                            
        ㄴ await












* 개발 용어
1. parsing : (JS, async vs defer)
2. excuting : (JS, async vs defer)
3. fetching : (JS, async vs defer)
4. hoisting : 변수 선언을 맨 위로 올려버리는 것. (JS, var를 쓰지 않는 이유)
5. scope : 유효범위
6. debug : 
7. compiler language : 코드를 컴퓨터가 이해할 수 있는 언어로 변환한 후에 한번에 실행하는 방식. 
8. interpreter language : 코드를 한 덩어리씩 실행해 결과를 출력하는 방식.
9. database :
10. RDBMS (Relational DatabBase Management System) : 
11. parenthesis : 소괄호
12. brace : 중괄호
13. bracket : 대괄호
14. REPL (Read-Eval-Print-Loop) : 코드를 한줄씩 읽고 평가한 후 출력하고 프롬프트가 나타나 새로운 입력을 기다리는 것을 반복하는 브라우저 콘솔의 특징
